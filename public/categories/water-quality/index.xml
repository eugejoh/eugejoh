<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Water Quality | Eugene J</title>
    <link>/categories/water-quality/</link>
      <atom:link href="/categories/water-quality/index.xml" rel="self" type="application/rss+xml" />
    <description>Water Quality</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Eugene Joh 2020</copyright><lastBuildDate>Sat, 09 Dec 2017 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/avatar.jpg</url>
      <title>Water Quality</title>
      <link>/categories/water-quality/</link>
    </image>
    
    <item>
      <title>Watermain Breaks in the City of Toronto</title>
      <link>/post/wm-breaks/</link>
      <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
      <guid>/post/wm-breaks/</guid>
      <description>


&lt;p&gt;This post goes into using open data provided by the City of Toronto and all the code is found on &lt;a href=&#34;https://github.com/eugejoh/TO_Watermain&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;drinking-water&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Drinking Water&lt;/h2&gt;
&lt;p&gt;Water is a basic physiological need for humans. We can go days without food and be okay, but without water… that’s another story. Drinking water or potable water is something in the developed world we take for granted. Much of the world does not have great access to clean water and by United Nations had made their 6th &lt;a href=&#34;http://www.un.org/sustainabledevelopment/water-and-sanitation/&#34;&gt;Sustainable Development Goal&lt;/a&gt; to “ensure access to water and sanitation for all” and that all people would have universal access to safe and affordable water by 2030.&lt;/p&gt;
&lt;p&gt;In Ontario (province of Canada) we are fortunate to have good water quality in most cities, towns, municipalities. It’s important to note that a disparity exists between regions across the province: large vs. small cities, southern vs. northern locations, and within &lt;a href=&#34;https://globalnews.ca/news/3238948/first-nations-drinking-water-crisis-liberals-promise/&#34;&gt;indigenous communities&lt;/a&gt;. Across the province, there are different types of drinking water systems, various combinations of owners/operators, and (complex) regulatory network ensuring that the quality of the water reaching users is acceptable for consumption.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;watermain-breaks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Watermain Breaks&lt;/h2&gt;
&lt;p&gt;Within these drinking water systems, the large pipes that carry most of the water through the system from the treatment plant through the distribution system are called &lt;strong&gt;watermains&lt;/strong&gt; (or water mains). In the event of a watermain failing, either by a crack, some leaking or a catastrophic break, this can have potential effects on the flow of water to users. There can be loss of pressure in the distribution system, potentially allowing contaminants (chemical or microbiological) to enter the drinking water system due to the loss of pressure. No one wants to have E. coli or some industrial chemical in their tap water.&lt;/p&gt;
&lt;p&gt;There are many factors behind a watermain failure. Most of the time there multiple concurrent factors that cause the pipe to crack or break. A non-exhaustive list of factors include type of pipe material, age of pipe, surrounding soil conditions, corrosion, pressure fluctuations, direct damage, extreme temperatures, extreme weather events, and poor system design.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/wm-breaks/watermain-break.jpg&#34; style=&#34;width:95.0%&#34; /&gt; ## Toronto Watermain Break Data The City of Toronto has an &lt;a href=&#34;https://www1.toronto.ca/wps/portal/contentonly?vgnextoid=1a66e03bb8d1e310VgnVCM10000071d60f89RCRD&#34;&gt;Open Data Catalogue&lt;/a&gt; containing various types of datasets on a number of topics like environment, public safety, development, and government. You can follow them on &lt;a href=&#34;http://www.twitter.com/open_to&#34;&gt;Twitter&lt;/a&gt; to know when they update/refresh their data. I downloaded the Excel flat-file containing the date and geographic location of watermain breaks from 1990 to 2016 within the city of Toronto boundaries. For this post I will be focusing on the temporal nature of the data, aka what do the trends of watermain breaks look like over time in Toronto.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-import-exploration-processing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Import, Exploration, Processing&lt;/h2&gt;
&lt;p&gt;After downloading the Excel file into my data folder, I use the &lt;code&gt;list.files()&lt;/code&gt; function and some regular expression to identify the &lt;code&gt;.xlsx&lt;/code&gt; files in the folder. This isn’t necessary since we only have one file in our folder but I’ve decided to make it good practice to have a standard method in selecting multiple files and file types in my data folder in a programmatic fashion. Afterwards I use the &lt;code&gt;read_excel()&lt;/code&gt; function from the &lt;code&gt;readxl&lt;/code&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/readxl/index.html&#34;&gt;package&lt;/a&gt; to import the dataset into R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;watermain.files &amp;lt;- list.files(&amp;quot;data&amp;quot;, pattern = &amp;quot;\\.xlsx$&amp;quot;)
wm.df &amp;lt;- readxl::read_excel(paste0(&amp;quot;data/&amp;quot;,watermain.files))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that there are 35461 rows or (assumed) unique watermain breaks. After using the &lt;code&gt;str()&lt;/code&gt; function to get a basic idea of the types of columns I have. I rename the column names using the &lt;code&gt;names()&lt;/code&gt; function and create a new column with the year as a &lt;code&gt;factor&lt;/code&gt; type (I actually don’t end up using this).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wm.df &amp;lt;- read_excel(paste0(&amp;quot;data/&amp;quot;,watermain.files))
names(wm.df) &amp;lt;- c(&amp;quot;Date&amp;quot;,&amp;quot;Year&amp;quot;,&amp;quot;X_coord&amp;quot;,&amp;quot;Y_coord&amp;quot;) #change column names
wm.df$Year_f &amp;lt;- as.factor(wm.df$Year) #create new column with &amp;#39;Year&amp;#39; as factor
wm.df$Year &amp;lt;- as.integer(wm.df$Year) #convert original &amp;#39;Year&amp;#39; to an integer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next I use the &lt;code&gt;floor_date()&lt;/code&gt; function from the &lt;code&gt;lubridate&lt;/code&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/lubridate/index.html&#34;&gt;package&lt;/a&gt; to create new columns containing the month and week. This will be useful later on when I want to aggregate the frequency counts of watermain breaks by week or month.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wm.df$week &amp;lt;- floor_date(wm.df$Date, unit = &amp;quot;week&amp;quot;) #floor to week
wm.df$month &amp;lt;- floor_date(wm.df$Date, unit = &amp;quot;month&amp;quot;) #floor to month&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I just create a new column that contains the same date information but instead of &lt;code&gt;POSIXct&lt;/code&gt;, it is in &lt;code&gt;Date&lt;/code&gt; format.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wm.df &amp;lt;- wm.df %&amp;gt;% mutate(date = as.Date(Date))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;This is not related to the temporal information but a good step with the data exploratory workflow.&lt;/em&gt; I want to do a bit a quality control/assurance with the data I have. I use the &lt;code&gt;summary()&lt;/code&gt; function to look at the &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Year&lt;/code&gt;, &lt;code&gt;X_coord&lt;/code&gt;, and &lt;code&gt;Y_coord&lt;/code&gt; columns. First thing that catches my eye is that there seems to be some extreme values or outliers in the spatial information, specifically the &lt;code&gt;X_coord&lt;/code&gt; maximum and &lt;code&gt;Y_coord&lt;/code&gt; minimum. For geographic information, typical errors include inputting latitude when it should be longitude, and vice-versa.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wm.df %&amp;gt;% select(X_coord, Y_coord) %&amp;gt;% summary()
 #    X_coord           Y_coord
 # Min.   : 294164   Min.   : 304472
 # 1st Qu.: 303580   1st Qu.:4838095
 # Median : 311195   Median :4842843
 # Mean   : 311820   Mean   :4841655
 # 3rd Qu.: 318587   3rd Qu.:4846416
 # Max.   :4845682   Max.   :4855952&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First I look at the &lt;code&gt;X_coord&lt;/code&gt; first and discover that the maximum value is not likely a &lt;code&gt;Y_coord&lt;/code&gt; and it is the only “error” in this column. The code below shows the steps I took to identify and remove this outlier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wm.df %&amp;gt;% arrange(desc(X_coord)) #error is X_coord = 4845681.6, not a Y_coord either
sort(wm.df$X_coord,decreasing = T)[1:3] # look at the top 3 largest values
summary(wm.df$X_coord) #identify the error/outlier
wm.df[which(wm.df$X_coord == max(wm.df$X_coord)),] #identify the row with the error/outlier
wm.df &amp;lt;- wm.df[-which(wm.df$X_coord == max(wm.df$X_coord)),] #remove error 2000-01-22&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then for the &lt;code&gt;Y_coord&lt;/code&gt; I do the same steps and discover there are three errors within this column. Again, the code below shows the steps I took to remove them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wm.df %&amp;gt;% arrange(Y_coord) #first three Y_coord are duplicates of X_coord
sort(wm.df$Y_coord,decreasing = F)[1:3] # Y_coord errors, three
wm.df[which(wm.df$Y_coord %in% sort(wm.df$Y_coord,decreasing = F)[1:3]),]
wm.df &amp;lt;- wm.df[-which(wm.df$Y_coord %in% sort(wm.df$Y_coord,decreasing = F)[1:3]),] #remove these errors&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I can aggregate the data by each week, month, and date simply using the &lt;code&gt;count()&lt;/code&gt; function from the &lt;code&gt;dplyr&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;month.wm &amp;lt;- wm.df %&amp;gt;% count(month) #month
week.wm &amp;lt;- wm.df %&amp;gt;% count(week) #week
year.wm &amp;lt;- wm.df %&amp;gt;% count(Year) #year&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-visualization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Visualization&lt;/h2&gt;
&lt;p&gt;Then we can use ggplot2 create a simple plot that visualizes the number of watermain breaks per week from 1990 to 2016.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = week.wm, aes(x=week, y=n)) +
   geom_line() + labs(title = &amp;quot;Watermain Breaks in Toronto (1990-2016)&amp;quot;,
                      x = &amp;quot;Year&amp;quot;, y = &amp;quot;Number of Breaks per Week&amp;quot;) +
  scale_x_datetime(date_breaks = &amp;quot;2 years&amp;quot;, date_labels = &amp;quot;%Y&amp;quot;) + 
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/post/wm-breaks/simple_weekly_wm.png&#34; style=&#34;width:95.0%&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;It looks like there is some pattern over time with peaks occurring in a periodic fashion. Let’s take a look at the seasonality of watermain breaks by month and week. We can add a new column to our data frame that codes for the month using the &lt;code&gt;mutate()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mth.wm &amp;lt;- wm.df %&amp;gt;% 
  group_by(month, Year) %&amp;gt;%
  count(month) %&amp;gt;%
  mutate(month_n = as.factor(month(month, label = T)))

mthwk.wm &amp;lt;- wm.df %&amp;gt;% 
  group_by(week, month, Year) %&amp;gt;%
  count(week, month, Year) %&amp;gt;%
  mutate(month_n = as.factor(month(month, label = T))) %&amp;gt;%
  mutate(yweek = week(week))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can visualize this using boxplots representing the number of watermain breaks per month.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mth.wm, aes(x = month_n, y = n)) +
  geom_boxplot(aes(group = month_n)) +
  labs(title = &amp;quot;Seasonality of Watermain Breaks in Toronto (1990-2016)&amp;quot;,
       x = &amp;quot;Month&amp;quot;, y = &amp;quot;Number of Breaks&amp;quot;) + theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/post/wm-breaks/mth_season_wm.png&#34; style=&#34;width:95.0%&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Looking at the dark black line in each boxplot, we can see that there is a clear increase in the median number of watermain breaks in Toronto during the colder months (November, December, January, February). Let’s use the nifty &lt;code&gt;animation&lt;/code&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/animation/index.html&#34;&gt;package&lt;/a&gt; and create a &lt;code&gt;.gif&lt;/code&gt; file to see how trend changes over the 27 year period. The boxplots in the animation below are for the entire time period from 1990 to 2016 and the changing line represents the median number of watermain breaks per month in the specified year in the title.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(animation)
aspect.w &amp;lt;- 800
aspect.r &amp;lt;- 1.6
title.size &amp;lt;- 20
ani.options(ani.width = aspect.w,
            ani.height = aspect.w / aspect.r,
            units = &amp;quot;px&amp;quot;)

saveGIF({
  for (i in unique(mth.wm$Year)) {
    g.loop &amp;lt;- ggplot(data = mth.wm, aes(x = month_n, y = n)) +
      geom_boxplot(aes(group = month_n)) +
      stat_summary(
        data = subset(mth.wm, Year == i),
        fun.y = median,
        geom = &amp;quot;line&amp;quot;,
        aes(group = 1),
        color = &amp;quot;#222FC8&amp;quot;,
        alpha = 0.6,
        size = 2
      ) +
      labs(
        title = paste0(&amp;quot;Seasonality of Watermain Breaks in Toronto (&amp;quot;, i, &amp;quot;)&amp;quot;),
        x = &amp;quot;Month&amp;quot;,
        y = &amp;quot;Number of Breaks per Month&amp;quot;
      ) +
      theme(plot.title = element_text(size = title.size, face = &amp;quot;bold&amp;quot;))
    print(g.loop)
  }
}, movie.name = &amp;quot;wm_wm.gif&amp;quot;, interval = 0.9, nmax = 30, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/post/wm-breaks/wm_wm2.gif&#34; style=&#34;width:95.0%&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-time-series-decomposition&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Time Series Decomposition&lt;/h2&gt;
&lt;p&gt;Since I aggregated the counts of watermain breaks by month, we have a set of data points in discrete intervals over time. In a basic sense, this is a time series and many other types of data exist in this format (stock market data, weather data, digital signal data, etc.) and there is a wealth of science and methods that deal with this type of data. That deserves a post in itself to talk about. Back to watermains… to get a better idea of the periodic pattern we observed in the first line plot and if there is a general trend over the 27 year period, we can use some R packages to “decompose” the data, extract the seasonal and trend components of the watermain break time series, and visualize them. By looking at these output plots we can make some preliminary inferences on the watermain breaks happening from 1990 to 2016.&lt;/p&gt;
&lt;p&gt;Since I am a &lt;code&gt;ggplot2&lt;/code&gt; junkie, we’ll make sure we have the &lt;code&gt;ggfortify&lt;/code&gt; package loaded in our R session and make use of the convenient &lt;code&gt;autoplot()&lt;/code&gt; function. First we’re going to create a time series object that contains the counts of watermain breaks per month from 1990 to 2016. The first argument in the &lt;code&gt;ts()&lt;/code&gt; function is the vector containing the counts of watermain breaks per month. We don’t necessarily have to worry about the column containing the date information since the second argument you can specify the start date c(1990,1) or January 1990 and the third argument you can specify the intervals/frequency of each data point; in this case since our time unit is a month we set the frequency to 12.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m.ts &amp;lt;- ts(month.wm$n, start=c(1990,1), frequency=12)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our ts object, we can use the convenient &lt;code&gt;autoplot()&lt;/code&gt; function to do a lazy plot the data. This is the monthly counts version of the first plot we made earlier in the post (which was counts per week).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(m.ts, main = &amp;quot;Time Series Watermain Breaks per Month in Toronto&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/wm-breaks/autoplot_wm.gif&#34; style=&#34;width:95.0%&#34; /&gt; Then we use the &lt;code&gt;decompose()&lt;/code&gt; function to extract the seasonal and trend information from the time series. The output is a list of data frames containing the original time series, the seasonal component, trend component, random component, and some other attribute information. Here I use the option to assume an additive time series model since the seasonal variation looks pretty consistent. This &lt;a href=&#34;https://anomaly.io/seasonal-trend-decomposition-in-r/&#34;&gt;link&lt;/a&gt; has a nice summary of the steps in decomposing a basic time series if you want to read further on this. The equation that this additive model is based on is below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Y[t] = T[t] + S[t] + e[t]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Where Y is the data point per time unit (month) is equal to the sum of the three components: T – trend, S – seasonality, and e – a random component. In short, the random component is the the remainder of the trend and seasonal components and can be suggestive of outliers in the data while considering the trend and seasonality.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(decompose(m.ts, type = &amp;quot;additive&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/post/wm-breaks/decomp_wm.png&#34; style=&#34;width:95.0%&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;From this plot we see the original time series at the top with the facet label ‘data’ (we seen this twice now so it’s nothing new). The second plot show the seasonal component and since there is a definite repeating pattern with the peaks coinciding with the peaks of watermain breaks and we can conclude there is seasonality or periodicity with the data (and confirms what we saw with the monthly box plots). The third plot displays the trend while disregarding the seasonal component and we can see that over the time period there is a general decreasing trend of watermain breaks in Toronto. The final and fourth plot shows the remainder or random component and it describes any variation or deviation in the data that is not considered in the seasonal or trend data. We can see in the original data the high spike in 1994 has a spike in the remainder plot as well. We can make a general conclusion that there this is an extraordinary number of watermain breaks in that small window. A more systematic approach would be to predetermine an threshold in which a remainder value would be significant, since we see some deviations occurring the recent years.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;spatial-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Spatial Data&lt;/h2&gt;
&lt;p&gt;The dataset contains spatial information contained in the columns labelled &lt;code&gt;X_coord&lt;/code&gt; and &lt;code&gt;Y_coord&lt;/code&gt;. It seems like the City of Toronto uses the Modified Transverse Mercator (MTM), North American Datum 1927 (NAD27) with a truncated northing (-4,000,000) geographic coordinate system. I’m not very familiar with doing coordinate system conversions in R but I would appreciate any feedback on how to do this! Regardless of this, I decided to visualize the spatial information and get a general idea of where these breaks were happening and when. The code below takes the coordinate data and plots them using &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = wm.df, aes(x = X_coord, y = Y_coord, color = year)) +
  geom_point(size = 1.5, alpha = 0.4) +
  scale_color_viridis(option = &amp;quot;B&amp;quot;) +
  labs(
    title = paste0(&amp;quot;Map of Watermain Breaks&amp;quot;),
    subtitle = paste0(&amp;quot;City of Toronto (1990-2016)&amp;quot;)
  ) +
  theme(
    axis.text = element_blank(),
    axis.title = element_blank(),
    axis.ticks = element_blank(),
    panel.background = element_rect(fill = &amp;quot;grey95&amp;quot;, colour = &amp;quot;grey5&amp;quot;),
    legend.background = element_rect(fill = &amp;quot;grey95&amp;quot;),
    panel.grid.minor = element_blank(),
    panel.grid.major = element_blank(),
    plot.title = element_text(size = title.size, face = &amp;quot;bold&amp;quot;),
    plot.subtitle = element_text(size = title.size * 0.6, face = &amp;quot;plain&amp;quot;),
    plot.background = element_rect(fill = &amp;quot;grey95&amp;quot;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/post/wm-breaks/wm_point_al.png&#34; style=&#34;width:95.0%&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;I am also a &lt;code&gt;viridis&lt;/code&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html&#34;&gt;package&lt;/a&gt; junkie if you haven’t noticed from my other posts. So as the legend says, the brighter yellow indicates a more recent watermain break, darker ones are further back in time. This plot isn’t too information since it shows all the watermain breaks over the entire 27 year period and we don’t have any reference for exact locations within the city of Toronto.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;so-what-does-this-mean&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;So what does this mean…&lt;/h2&gt;
&lt;p&gt;At first glance, you might be concerned after doing some quick mental math (35,461 breaks over 27 years… ~1300 breaks per year) and conclude that tap water provided these pipes is not safe and the residents of Toronto should only drink bottled water for the rest of their lives. This is NOT the point of this post and nor does it suggest people should be overly paranoid with seeing this. The city of Toronto is well-resourced and have the capacity to response to these watermain breaks, isolate them, fix them in a timely manner, and resume service of safe drinking water. The health risk from these breaks shouldn’t concern the average Torontonian and since waterborne diseases are extremely rare in developed countries and Toronto makes sure that their four water treatment plants are fully functioning to make sure all the water is safe. If you want to more about watermain breaks in Toronto you can check out their &lt;a href=&#34;https://www.toronto.ca/services-payments/building-construction/infrastructure-city-construction/understanding-city-construction/water-sewer-mains/&#34;&gt;website&lt;/a&gt; and read on how they are working hard behind the scene to ensure that you (if you live in Toronto) have access to safe drinking water.&lt;/p&gt;
&lt;p&gt;Everything in the post are my own views and as always feedback, comments, suggestions are always welcome. I am constantly learning new things about using R and love to learn. Feel free to reach out to me!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
